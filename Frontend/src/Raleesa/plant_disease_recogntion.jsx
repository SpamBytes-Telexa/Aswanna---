import React, { useState } from 'react';
import axios from 'axios';
import './plant_disease_recogntion.css';

function App() {
  const [image, setImage] = useState(null);
  const [preview, setPreview] = useState(null);
  const [prediction, setPrediction] = useState(null);

  const classLabelsSinhala = {
    healthy: "‡∂±‡∑ì‡∂ª‡∑ù‡∂ú‡∑ì",
    rust: "Powdery - ‡∂Ø‡∑í‡∂Ω‡∑ì‡∂ª ‡∂ª‡∑ù‡∂ú‡∂∫",
    powdery: "Rust - ‡∂Ø‡∑í‡∂Ω‡∑ì‡∂ª ‡∂ª‡∑ù‡∂ú‡∂∫",
  };

  const recommendationsSinhala = {
    rust: [
      "‡∂Ø‡∑í‡∂± 10‡∂ö‡∑ä ‡∂≠‡∑î‡∑Ö ‡∑É‡∂Ω‡∑ä‡∑Ü‡∂ª‡∑ä/‡∂±‡∑ì‡∂∏‡∑ä ‡∂≠‡∑ô‡∂Ω‡∑ä ‡∂∫‡∑ô‡∂Ø‡∑ì‡∂∏‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
      "‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂∫‡∂±‡∂∏‡∑ä ‡∂¥‡∑ê‡∂Ω ‡∂ö‡∂¥‡∑ä‡∂¥‡∑è‡∂Ø‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
      "‡∑Ä‡∂©‡∑è ‡∑Ñ‡∑ú‡∂≥ ‡∑Ä‡∑è‡∂∫‡∑î ‡∑É‡∂±‡∑ä‡∂†‡∑è‡∂ª‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.",
      "‡∂ã‡∂Ø‡∑è‡∑É‡∑ì‡∂± ‡∂¥‡∑ú‡∑Ñ‡∑ú‡∂ª ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫ ‡∑Ä‡∂Ω‡∂ö‡∑ä‡∑Ä‡∂±‡∑ä‡∂±."
    ],
    powdery: [
      "‡∂Ö‡∑É‡∑è‡∂∞‡∑ä‚Äç‡∂∫ ‡∂¥‡∂≠‡∑ä‚Äç‡∂ª ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª ‡∑Ä‡∑í‡∂±‡∑è‡∑Å ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
      "‡∂Ø‡∑í‡∂± 7‡∂ö‡∑ä ‡∂≠‡∑í‡∑É‡∑ä‡∑É‡∑ö ‡∂Ø‡∑í‡∂Ω‡∑ì‡∂ª ‡∂±‡∑è‡∑Å‡∂ö‡∂∫‡∂ö‡∑ä ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.",
      "‡∂¥‡∑ê‡∑Ö ‡∑Ä‡∂ß‡∑è ‡∑Ä‡∑è‡∂∫‡∑î ‡∑É‡∂Ç‡∑É‡∂ª‡∂´‡∂∫ ‡∑Ä‡∑ê‡∂©‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.",
      "‡∂Ö‡∂∞‡∑í‡∂ö ‡∂¢‡∂Ω‡∂∫ ‡∂Ö‡∑Ä‡∑Ñ‡∑í‡∂ª ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
    ]
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file);
    setPreview(URL.createObjectURL(file));
  };

  const handleUpload = async () => {
    if (!image) return;

    const formData = new FormData();
    formData.append("file", image);

    try {
      const response = await axios.post("http://127.0.0.1:8000/ml/predict", formData);
      setPrediction(response.data);
    } catch (err) {
      alert("Error uploading image or getting prediction.");
    }
  };

  return (
    <div className="app">
      <h2>üåø ‡∂¥‡∑Ö‡∑í‡∂∂‡∑ù‡∂∞ ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏</h2>

      <div className="upload-section">
        <h5 className='button'>üëá‡∂¥‡∑í‡∂±‡∑ä‡∂≠‡∑ñ‡∂ª‡∂∫ ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±</h5>
        <input type="file" accept="image/*" onChange={handleImageChange} />
        {preview && <img src={preview} alt="Preview" className="preview" />}
        <button onClick={handleUpload}>‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±</button>
      </div>

      {/* {prediction && (
        <div
          className={`result-card ${prediction.class === "healthy" ? "healthy" : "diseased"}`}
        >
          <h3>‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫</h3>
          <p><strong>‡∂ª‡∑ù‡∂ú ‡∑Ä‡∂ª‡∑ä‡∂ú‡∂∫:</strong> {classLabelsSinhala[prediction.class]}</p>
          <p><strong>‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑è‡∑É‡∂∫:</strong> {(prediction.confidence * 100).toFixed(2)}%</p>
        </div>
      )} */}

      {prediction && (
        <div className="results-container">
          {/* Prediction Result Card */}
          <div className={`result-card ${prediction.class === "healthy" ? "healthy" : "diseased"}`}>
            <h3><b>‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫</b></h3>
            <p><strong>‡∂ª‡∑ù‡∂ú ‡∑Ä‡∂ª‡∑ä‡∂ú‡∂∫ :</strong> {classLabelsSinhala[prediction.class]}</p>
            <p><strong>‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑è‡∑É‡∂∫ :</strong> {(prediction.confidence * 100).toFixed(2)}%</p>
          </div>

          {/* Recommendation Card */}
          {prediction.class !== "healthy" && (
            <div className="recommendation-card">
              <h3>üõ† ‡∂±‡∑í‡∂ª‡∑ä‡∂Ø‡∑ö‡∑Å</h3>
              <ul>
                {recommendationsSinhala[prediction.class]?.map((step, idx) => (
                  <li key={idx}>{step}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

    </div>
  );
}

export default App;
